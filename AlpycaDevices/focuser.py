
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# focuser.py - Alpaca API responders for Focuser
#
# Author:   Ramon C. Gargalhone <rgargalhone@lna.br> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        

from focuserDevice import Focuser

logger: Logger = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class FocuserMetadata:
    """ Metadata describing the Focuser Device. Edit for your device"""
    Name = 'LNA Focuser'
    Version = '0.1.0'
    Description = 'Focuser Driver for Perkin-Elmer Focuser'
    DeviceType = 'Focuser'
    DeviceID = '3285e9af-8d1d-4f9d-b368-d129d8e9a24b' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements IFocuser\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 3 ##YOUR DEVICE INTERFACE VERSION##        # IFocuserVxxx

# --------------------
# RESOURCE CONTROLLERS
# --------------------

def start_foc_device(logger: logger):
    logger = logger
    global foc_dev
    foc_dev = Focuser(logger)

@before(PreProcessRequest(maxdev))
class Action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBlind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandString():
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class Description():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class DriverInfo():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class InterfaceVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class DriverVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class Name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class SupportedActions():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class connected:
    """Retrieves or sets the connected state of the device

    * Set True to connect to the device hardware. Set False to disconnect
      from the device hardware. Client can also read the property to check
      whether it is connected. This reports the current hardware state.
    * Multiple calls setting Connected to true or false must not cause
      an error.

    """
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(foc_dev.connected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # ----------------------
            foc_dev.connected = conn
            # ----------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json


@before(PreProcessRequest(maxdev))
class absolute:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.absolute
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Absolute failed', ex)).json

@before(PreProcessRequest(maxdev))
class ismoving:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.is_moving
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Ismoving failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxincrement:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.max_increment
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Maxincrement failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxstep:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.max_step
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Maxstep failed', ex)).json

@before(PreProcessRequest(maxdev))
class position:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.position
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Position failed', ex)).json

@before(PreProcessRequest(maxdev))
class stepsize:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.step_size
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Stepsize failed', ex)).json

@before(PreProcessRequest(maxdev))
class tempcomp:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.temp_comp
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Tempcomp failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        tempcompstr = get_request_field('TempComp', req)      # Raises 400 bad request if missing
        tempcomp = to_bool(tempcompstr)                       # Same here

        try:
            # -----------------------------
            foc_dev.temp_comp = tempcomp
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Tempcomp failed', ex)).json

@before(PreProcessRequest(maxdev))
class tempcompavailable:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.temp_comp_available
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Tempcompavailable failed', ex)).json

@before(PreProcessRequest(maxdev))
class temperature:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = foc_dev.temp
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Temperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class halt:
    def on_put(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            foc_dev.Halt()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Halt failed', ex)).json

@before(PreProcessRequest(maxdev))
class move:
    def on_put(self, req: Request, resp: Response, devnum: int):
        if not foc_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        positionstr = get_request_field('Position', req)      # Raises 400 bad request if missing
        try:
            position = int(positionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Position " + positionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            if foc_dev.temp_comp:
                resp.text = MethodResponse(req,
                            InvalidOperationException('TempComp is set True')).json
                return
            # -----------------------------
            foc_dev.move(position)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Move failed', ex)).json


